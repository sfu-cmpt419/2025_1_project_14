import cv2
import numpy as np
import os
import pandas as pd


"""
Use this function to quickly get b-scores for your images PROVIDED that you have their segmentation masks.
Raw images in SEGMENTED_IMAGES_DIR
Segmentation Masks go in SEGMENTED_MASKS_DIR
On line 155 you can create_visualizations(), which will draw the following:
    - The RED segmentation boundary
    - The GREEN eight splices (used in border calculations)
    - The CYAN points where abrupt borders were detected.
"""
SEGMENTED_IMAGES_DIR = "src/border/input_images/raw"
SEGMENTED_MASKS_DIR = "src/border/input_images/mask"
BORDER_SCORES_CSV = "output/border/border_scores.csv"
SEGMENTED_VISUAL_DIR = "output/border/visual"
PIXEL_DENSITY_THRESHOLD = 0.0075
INTENSITY_DIFF_THRESHOLD = 35
OUTWARD_STEP = 4
DIRECTIONS = [(-1, 0), (1, 0), (0, -1), (0, 1), (-1, -1), (-1, 1), (1, -1), (1, 1)]

comparison_points = []

def find_lesion_center_from_mask(mask):
    moments = cv2.moments(mask)
    if moments["m00"] == 0:
        h, w = mask.shape
        return w // 2, h // 2
    cx = int(moments["m10"] / moments["m00"])
    cy = int(moments["m01"] / moments["m00"])
    return cx, cy

def divide_into_segments(mask, cx, cy):
    h, w = mask.shape
    segments = [
        mask[0:cy, 0:cx],
        mask[0:cy, cx:w],
        mask[cy:h, 0:cx],
        mask[cy:h, cx:w],
        mask[0:cy, cx//2:(cx + w)//2],
        mask[cy:h, cx//2:(cx + w)//2],
        mask[cy//2:(cy + h)//2, 0:cx],
        mask[cy//2:(cy + h)//2, cx:w],
    ]
    return segments

def border_score(image, mask):
    global comparison_points
    comparison_points = []
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    if not contours:
        return 0
    edge_mask = np.zeros_like(mask)
    cv2.drawContours(edge_mask, contours, -1, 255, thickness=1)
    cx, cy = find_lesion_center_from_mask(mask)
    segments = divide_into_segments(edge_mask, cx, cy)
    score = 0
    h, w = mask.shape
    for idx, seg in enumerate(segments):
        edge_pixels = np.argwhere(seg > 0)
        sharp_count = 0
        for (y, x) in edge_pixels:
            global_x = x
            global_y = y
            if idx == 1 or idx == 3 or idx == 7:
                global_x += cx
            if idx == 2 or idx == 3 or idx == 5:
                global_y += cy
            if idx == 4 or idx == 5:
                global_x += (cx // 2)
            if idx == 6 or idx == 7:
                global_y += (cy // 2)
            if global_x <= 0 or global_y <= 0 or global_x >= w or global_y >= h:
                continue
            inside_mask = mask[global_y, global_x]
            if inside_mask == 0:
                continue
            for dy, dx in DIRECTIONS:
                out_x = int(global_x + OUTWARD_STEP * dx)
                out_y = int(global_y + OUTWARD_STEP * dy)
                if 0 <= out_x < w and 0 <= out_y < h:
                    outside_mask = mask[out_y, out_x]
                    if outside_mask == 0:
                        intensity_inside = image[global_y, global_x]
                        intensity_outside = image[out_y, out_x]
                        intensity_diff = abs(int(intensity_inside) - int(intensity_outside))
                        if intensity_diff > INTENSITY_DIFF_THRESHOLD:
                            comparison_points.append((global_x, global_y, out_x, out_y))
                            sharp_count += 1
                            break
        if len(edge_pixels) > 0 and (sharp_count / len(edge_pixels)) > PIXEL_DENSITY_THRESHOLD:
            score += 1
    return score

def draw_8_segments(image, mask):
    h, w = image.shape[:2]
    if len(image.shape) == 2:
        image = cv2.cvtColor(image, cv2.COLOR_GRAY2BGR)
    cx, cy = find_lesion_center_from_mask(mask)
    color = (0, 255, 0)
    thickness = 2
    cv2.line(image, (cx, 0), (cx, h), color, thickness)
    cv2.line(image, (0, cy), (w, cy), color, thickness)
    cv2.line(image, (0, cy - cx), (w, cy + (w - cx)), color, thickness)
    cv2.line(image, (0, cy + cx), (w, cy - (w - cx)), color, thickness)
    edges = cv2.Canny(mask, 50, 150)
    dilated_edges = cv2.dilate(edges, np.ones((3, 3), np.uint8), iterations=1)
    edges_bgr = cv2.cvtColor(dilated_edges, cv2.COLOR_GRAY2BGR)
    edges_colored = np.where(edges_bgr > 0, (0, 0, 255), 0)
    visual = cv2.addWeighted(image, 1.0, edges_colored.astype(np.uint8), 1.0, 0)
    for (x1, y1, x2, y2) in comparison_points:
        cv2.line(visual, (x1, y1), (x2, y2), (255, 255, 0), 1)
    return visual

def create_visualizations():
    for file in os.listdir(SEGMENTED_IMAGES_DIR):
        if file.endswith(".png") or file.endswith(".jpg"):
            image_path = os.path.join(SEGMENTED_IMAGES_DIR, file)
            basename = file.replace(".jpg", "").replace(".png", "")
            mask_name = basename + "_segmentation.png"
            mask_path = os.path.join(SEGMENTED_MASKS_DIR, mask_name)
            if not os.path.exists(mask_path):
                print(f"Mask not found for {file}, skipping visualization.")
                continue
            image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
            mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
            if image is not None and mask is not None:
                border_score(image.copy(), mask)
                visual_image = draw_8_segments(image.copy(), mask)
                os.makedirs(SEGMENTED_VISUAL_DIR, exist_ok=True)
                save_path = os.path.join(SEGMENTED_VISUAL_DIR, file)
                cv2.imwrite(save_path, visual_image)

def process_images():
    border_scores = []
    for file in os.listdir(SEGMENTED_IMAGES_DIR):
        if file.endswith(".png") or file.endswith(".jpg"):
            image_path = os.path.join(SEGMENTED_IMAGES_DIR, file)
            basename = file.replace(".jpg", "").replace(".png", "")
            mask_name = basename + "_segmentation.png"
            mask_path = os.path.join(SEGMENTED_MASKS_DIR, mask_name)
            if not os.path.exists(mask_path):
                print(f"Mask not found for {file}, skipping scoring.")
                continue
            image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
            mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
            if image is not None and mask is not None:
                score = border_score(image, mask)
                border_scores.append([file, score])
    os.makedirs(os.path.dirname(BORDER_SCORES_CSV), exist_ok=True)
    border_scores_df = pd.DataFrame(border_scores, columns=["Image_Name", "Border_Score"])
    border_scores_df.to_csv(BORDER_SCORES_CSV, index=False)
    create_visualizations()

if __name__ == "__main__":
    process_images()
